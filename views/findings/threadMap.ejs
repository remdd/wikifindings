<% include ../partials/header %>

<link rel="stylesheet" type="text/css" href="/css/threadMap.css">
<script type="text/javascript" src="/lib/lodash.js"></script>
<script type="text/javascript" src="/lib/vis/vis.js"></script>
<link rel="stylesheet" type="text/css" href="/lib/vis/vis.css">


<!--	Info modal 				-->
<div id="aboutModal" class="popup closed">
	<div class="popupContents">
		<h4>About the Thread Network</h4>
		<hr>
		<ul>
			<li>The Thread Network is a means of visualizing threads of research by mapping the connections that exist between different Findings.</li>
			<li>The network display is loaded with a specific Finding at the 'origin' - the <strong>central node</strong>.</li>
			<li>All of the Findings that directly reference this Finding (by Preceding or Following it) are then added to the display as additional 'nodes', each connected to the <strong>central node</strong> by an arrow - which points <em>from</em> the Preceding <em>to</em> the Following Finding.</li>
			<li>Further nodes are then added to represent the Findings that directly reference these Findings, and then another set to represent the Findings that directly reference these, and so on - until all of the Findings that are connected to the original Finding by 5 or less 'degrees of separation' have been added.</li>
			<li>Any Findings that connect to the <strong>central node</strong> by 6 degrees of separation are represented only as grey dots, and are connected to other Findings by dashed arrows - their titles etc are not displayed. These are included to indicate where a thread of research continues beyond the scope of the network as it is currently displayed.</li>
			<li>To further explore the connections around these more distant nodes, simply select a nearby Finding by clicking it and then click the 'Rebuild Thread Network with selected Finding at origin' link that can be found below the network display.</li>
			<hr>
			<li>Due to the dynamic nature of the network and the process used to generate the display, it is possible (particularly when the network includes a lot of nodes, or their relationships are complex) for nodes to occasionally load partially overlapping each other or obscuring the connecting arrows. In this event, note that nodes can be moved into a more readable arrangement simply by dragging them with the mouse.</li>
		</ul>
	</div>
	<div class="popupFooter">
		<h4 class="closePopup"><i class="fa fa-window-close headerIcon" aria-hidden="true"></i>Close</h4>
	</div>
</div>
<div id="popupOverlay" class="popupOverlay closed"></div>


<h3>Thread Network</h3>
<h4><a id="aboutLink" href="#"><i class="fa fa-info-circle headerIcon" aria-hidden="true"></i>About</a></h4>

<div id="tm_container"></div>

<!--	Display selected Finding in index format -->
<h3>Selected Finding</h3>
<div id="selectedFindingDiv">
	<% threads.forEach(function(thread) { %>
		<% var finding = thread; %>
		<div class="indexedFinding hiddenThread" data-id="<%= finding._id %>">
			<h4><a href="/threads/5&<%= thread._id %>"><i class="fa fa-repeat headerIcon" aria-hidden="true"></i>Rebuild Thread Network with the selected Finding at the origin</a></h4>
			<% include ../partials/indexedFinding %>
		</div>
	<% }); %>
</div>

<div id="eventDiv"></div>


<script type="text/javascript">
	$(document).ready(function() {

		// $('.headerRow').css('display', 'none');

		var threads = <%- JSON.stringify(threads) %>;				//	Note to self - remember EJS calls JSON.stringify, not client!!
		console.log(threads);

		var finding = <%- JSON.stringify(finding) %>;

		//	Vis config & display
		var nodes = [];
		var edges = [];
		var groups = {};
		var distants = [];					//	Distants are Findings that are at the final degree of separation - returned from DB as ObjectIDs only (not populated)
		var distant_edges = [];				//	Distant_edges are used to connect Distants to Nodes

		var threadIDs = [];
		threads.forEach(function(thread) {
			threadIDs.push(thread._id);
		});
		console.log(threadIDs.length + " threads: " + threadIDs);
		threads.forEach(function(thread) {
			if(typeof thread.followedBy !== 'undefined' && thread.followedBy.length > 0) {
				for(var i = 0; i < thread.followedBy.length; i++) {
					if($.inArray(thread.followedBy[i], threadIDs) === -1 && $.inArray(thread.followedBy[i], distants) === -1) {
						distants.push(thread.followedBy[i]);
					}
				}
			}
			if(typeof thread.precededBy !== 'undefined' && thread.precededBy.length > 0) {
				for(var i = 0; i < thread.precededBy.length; i++) {
					if($.inArray(thread.precededBy[i], threadIDs) === -1 && $.inArray(thread.precededBy[i], distants) === -1) {
						distants.push(thread.precededBy[i]);
					}
				}
			}

		});
		console.log(distants.length + " distants: " + distants);

		distants.forEach(function(distant) {
			console.log(distant);
			var node = {
				id: distant,
				shape: 'dot',
				color: 'lightgrey',
				size: 15
			}
			nodes.push(node);
		});

		//	Add threads to Nodes and add 'followed by' connections as 'edges'
		threads.forEach(function(thread) {

			//	Create and configure nodes from threads and push to nodes array
			var node = {
				id: thread._id,
				label: thread.title,
				group: thread.subject.subjectName,
				relatives: thread.followedBy.length + thread.precededBy.length,
				title: thread.subject.subjectName							//	Can use to set tooltip text if desired
			}
			nodes.push(node);

			//	Push 'followedBy' links to edges array
			if(typeof thread.followedBy !== 'undefined' && thread.followedBy.length > 0) {
				thread.followedBy.forEach(function(follow) {
					var edge = {
						from: thread._id,
						to: follow
					}
					if($.inArray(follow, distants) !== -1) {
						edge.dashes = true;
						edge.color = 'lightgrey';
					}
					edges.push(edge);
				});
			}
			if(typeof thread.precededBy !== 'undefined' && thread.precededBy.length > 0) {
				thread.precededBy.forEach(function(prec) {
					if($.inArray(prec, distants) !== -1) {
						var edge = {
							from: prec,
							to: thread._id,
							dashes: true,
							color: 'lightgrey'
						}
						edges.push(edge);
					}
				});
			}

			//	Add unique thread subjects to groups array
			var subject = {};
			subject[thread.subject.subjectName] = 
			{
				'color': {
					'border': thread.subject.subjectColor, 
					'background': 'white',
					'highlight': {
						'borderWidth': 1,
						'border': 'red',
						'background': 'green'
					}
				} 
			};
			var uniq = true;
			for(var i = 0; i < groups.length; i++) {
				if(_.has(groups[i], thread.subject.subjectName)) {
					uniq = false;
				}
			}
			if(uniq) {
				Object.assign(groups, subject);
			}

		});

		//	Add nodes & edges as vis datasets
		nodes = new vis.DataSet(nodes);
		edges = new vis.DataSet(edges);

		var selectNode = function(values, id, selected, hovering) {
			values.color = "#DDDDDD";
			values.borderWidth = 2;
			values.margin = 10;
		}

		//	Select container for vis visualization, add node & edge data
		var container = document.getElementById('tm_container');
		var data = {
			nodes: nodes,
			edges: edges
		};

		//	Configure options
		var options = {
			edges: {
				arrows: 'to',				//	Arrows point to 'followed by' findings
				length: 180,
				width: 3
			},
			groups: {},
			interaction: {
				dragNodes: true,					//	Set whether nodes are draggable
				navigationButtons: true
			},
			layout: {
				randomSeed: 233318,			//233318,
				improvedLayout: true
			},
			nodes: {
				borderWidth: 2,
				borderWidthSelected: 2,
				chosen: {
					node: selectNode,
					label: false
				},
				font: {
					face: 'Maven Pro',
					size: 14
				},
				heightConstraint: 100,
				labelHighlightBold: false,
				margin: 10,
				scaling: {
					label: false
				},
				shadow: {
					enabled: true,
					color: 'rgba(0,0,0,0.3)',
					size: 10,
					x: 5,
					y: 5
				},
				shape: 'box',
				shapeProperties: {
					borderRadius: 3
				},
				widthConstraint: {
					minimum: 150,
					maximum: 150
				}
			},
			physics: {
				enabled: true,
				barnesHut: {
					avoidOverlap: 0.4
				},
				stabilization: {
					iterations: 2000,
					fit: true
				}
			}
		};
		Object.assign(options.groups, groups);
		console.log(options);

		//	Instantiate network
		var network = new vis.Network(container, data, options);
		// console.log(network.getSeed());					//	Get layout seed

        network.once("stabilizationIterationsDone", function() {			//	Callback when network is loaded & stabilized
            move();
        	network.stopSimulation();					//	Stops further node restlessness after initial stabilization iterations
        	var id = finding._id;
        	$('div').find('[data-id="' + id + '"]').removeClass('hiddenThread');
        	network.physics.options.enabled = false;						//	Disables physics after initial load
        	network.selectNodes([finding._id]);				//	Selects origin thread after initial load
        });

        network.on('deselectNode', function(e) {
        	e.previousSelection.nodes.forEach(function(node) {
        		//	Code here?
        	});
        });

		function move() {
			network.focus(finding._id, {				//	Focus on selected 'Finding'
				scale: 1,								//	Zoom level
				animation: {
					duration: 1000,
					easingFunction: 'easeInOutQuad'
				}
			});
		}

		//	Handle node selection event
	    network.on("selectNode", function (params) {
	        params.event = "[original event]";
	        // document.getElementById('eventDiv').innerHTML = '<h3>click event:</h3><pre>' + JSON.stringify(params, null, 4) + '</pre>';
	        if(typeof this.getNodeAt(params.pointer.DOM) !== 'undefined') {
	        	var selectedNodeID = this.getNodeAt(params.pointer.DOM);
		        updateSelectedFinding(selectedNodeID);
		        console.log(network.body.nodes[selectedNodeID]);
	        }
	    });
		//	Handle node drag start event
	    network.on("dragStart", function (params) {
	        params.event = "[original event]";
	        // document.getElementById('eventDiv').innerHTML = '<h3>click event:</h3><pre>' + JSON.stringify(params, null, 4) + '</pre>';
	        if(typeof this.getNodeAt(params.pointer.DOM) !== 'undefined') {
	        	var selectedNodeID = this.getNodeAt(params.pointer.DOM);
		        updateSelectedFinding(selectedNodeID);
		        console.log(network.body.nodes[selectedNodeID]);
	        }
	    });

	    function updateSelectedFinding(id) {
	    	$('.indexedFinding').addClass('hiddenThread');
	    	$('div').find('[data-id="' + id + '"]').removeClass('hiddenThread');
	    }

	    $('#aboutLink').click(function() {
	    	$('.popup, .popupOverlay').removeClass('closed');
	    });
	    $('.closePopup, .popupOverlay').click(function() {
	    	$('.popup, .popupOverlay').addClass('closed');
	    });
	});


</script>


<% include ../partials/footer %>