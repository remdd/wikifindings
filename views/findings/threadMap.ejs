<% include ../partials/header %>
<link rel="stylesheet" type="text/css" href="/css/threadMap.css">

<script type="text/javascript" src="/lib/lodash.js"></script>
<script type="text/javascript" src="/lib/vis/vis.js"></script>
<link rel="stylesheet" type="text/css" href="/lib/vis/vis.css">

<div id="tm_container"></div>

<!--	Display selected Finding in index format -->
<h3>Selected Finding</h3>
<div id="selectedFindingDiv">
	<% threads.forEach(function(thread) { %>
		<% var finding = thread; %>
		<div class="indexedFinding hiddenThread" data-id="<%= finding._id.toString(); %>">
			<h4><a href="/threads/<%= thread._id.toString(); %>">Recreate Thread Network centred on this Finding</a></h3>
			<% include ../partials/indexedFinding %>
		</div>
	<% }); %>
</div>

<div id="eventDiv"></div>


<script type="text/javascript">
	$(document).ready(function() {

		$('.headerRow').css('display', 'none');

		var threads = <%- JSON.stringify(threads) %>;				//	Note to self - remember EJS calls JSON.stringify, not client!!
		console.log(threads);

		var finding = <%- JSON.stringify(finding) %>;

		//	Vis config & display
		var nodes = [];
		var edges = [];
		var groups = {};

		//	Add threads to Nodes and add 'followed by' connections as 'edges'
		threads.forEach(function(thread) {
			//	Set up node with primary info from thread
			var node = {
				id: thread._id,
				label: thread.title,
				group: thread.subject.subjectName
				// title: 'Tooltip text'							//	Can use to set tooltip text if desired
			}
			if(thread._id === finding._id) {
				console.log("centring");							//	Add any properties to original node only
				thread.fixed = true;
				// thread.physics = false;
				// thread.x = 0;
				// thread.y = 0;
			}
			//	Add thread subject to 'groups' array if not already present
			var subject = {};
			subject[thread.subject.subjectName] = 
			{
				'color': {
					'border': thread.subject.subjectColor, 
					'background': 'white',
					'highlight': {
						'borderWidth': 1,
						'border': 'red',
						'background': 'green'
					}
				} 
			};
			var uniq = true;
			for(var i = 0; i < groups.length; i++) {
				if(_.has(groups[i], thread.subject.subjectName)) {
					uniq = false;
				}
			}
			if(uniq) {
				Object.assign(groups, subject);
			}
			nodes.push(node);
			if(typeof thread.followedBy !== 'undefined' && thread.followedBy.length > 0) {
				thread.followedBy.forEach(function(follow) {
					var edge = {
						from: thread._id,
						to: follow
					}
					edges.push(edge);
				});
			}
		});

		//	Add nodes & edges as vis datasets
		nodes = new vis.DataSet(nodes);
		edges = new vis.DataSet(edges);

		console.log(nodes);
		console.log(edges);
		console.log(groups);


		var selectNode = function(values, id, selected, hovering) {
			values.color = "#DDDDDD";
			values.borderWidth = 2;
			values.margin = 10;
		}

		//	Select container for vis visualization, add node & edge data
		var container = document.getElementById('tm_container');
		var data = {
			nodes: nodes,
			edges: edges
		};

		//	Configure options
		var options = {
			edges: {
				arrows: 'to',				//	Arrows point to 'followed by' findings
				length: 180,
				width: 3
			},
			groups: {},
			interaction: {
				dragNodes: true,					//	Set whether nodes are draggable
				navigationButtons: true
			},
			layout: {
				randomSeed: 233318,			//233318,
				improvedLayout: true
			},
			nodes: {
				borderWidth: 2,
				borderWidthSelected: 2,
				chosen: {
					node: selectNode,
					label: false
				},
				font: {
					face: 'Maven Pro',
					size: 14
				},
				heightConstraint: 100,
				labelHighlightBold: false,
				margin: 10,
				scaling: {
					label: false
				},
				shadow: {
					enabled: true,
					color: 'rgba(0,0,0,0.3)',
					size: 10,
					x: 5,
					y: 5
				},
				shape: 'box',
				shapeProperties: {
					borderRadius: 3
				},
				widthConstraint: {
					minimum: 100,
					maximum: 150
				}
			},
			physics: {
				enabled: true,
				barnesHut: {
					avoidOverlap: 0.4
				},
				stabilization: {
					iterations: 2000,
					fit: true
				}
			}
		};
		Object.assign(options.groups, groups);
		console.log(options);

		//	Instantiate network
		var network = new vis.Network(container, data, options);
		console.log(network.getSeed());					//	Get layout seed

        network.once("stabilizationIterationsDone", function() {			//	Callback when network is loaded & stabilized
            move();
        	network.stopSimulation();					//	Stops further node restlessness after initial stabilization iterations
        	var id = finding._id.toString();
        	$('div').find('[data-id="' + id + '"]').removeClass('hiddenThread');
        	network.physics.options.enabled = false;						//	Disables physics after initial load
        });

        network.on('deselectNode', function(e) {
        	e.previousSelection.nodes.forEach(function(node) {
        		//	Code here?
        	});
        });

		function move() {
			network.focus(finding._id, {				//	Focus on selected 'Finding'
				scale: 1,								//	Zoom level
				animation: {
					duration: 1000,
					easingFunction: 'easeInOutQuad'
				}
			});
		}

		//	Network click listener
	    network.on("selectNode", function (params) {
	        params.event = "[original event]";
	        // document.getElementById('eventDiv').innerHTML = '<h3>click event:</h3><pre>' + JSON.stringify(params, null, 4) + '</pre>';
	        if(typeof this.getNodeAt(params.pointer.DOM) !== 'undefined') {
	        	var selectedNodeID = this.getNodeAt(params.pointer.DOM);
		        console.log('select event - node: ' + selectedNodeID);
		        updateSelectedFinding(selectedNodeID);
	        }
	    });
	    network.on("dragStart", function (params) {
	        params.event = "[original event]";
	        // document.getElementById('eventDiv').innerHTML = '<h3>click event:</h3><pre>' + JSON.stringify(params, null, 4) + '</pre>';
	        if(typeof this.getNodeAt(params.pointer.DOM) !== 'undefined') {
	        	var selectedNodeID = this.getNodeAt(params.pointer.DOM);
		        console.log('dragStart event - node: ' + selectedNodeID);
		        updateSelectedFinding(selectedNodeID);
	        }
	    });

	    function updateSelectedFinding(id) {
	    	console.log('updating: ' + id);
	    	$('.indexedFinding').addClass('hiddenThread');
	    	$('div').find('[data-id="' + id + '"]').removeClass('hiddenThread');
	    }

	});


</script>


<% include ../partials/footer %>